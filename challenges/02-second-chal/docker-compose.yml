networks:
  minio-net:
    driver: bridge

services:
  minio1:
    image: minio/minio:RELEASE.2023-02-17T17-52-43Z
    hostname: minio1
    networks:
      - minio-net
    volumes:
      - data1-1:/data1
      - data1-2:/data2
      - ./flag.txt:/root/flag.txt
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=123Senh@Forte
      - MINIO_UPDATE_MINISIGN_PUBKEY=
      # Removido MINIO_DEFAULT_BUCKETS. A criação será feita pelo mc-setup.
    
    # Comando para iniciar o cluster. Note que 'minio' será o nome do serviço na rede.
    command: server http://minio1/data{1...2} http://minio2/data{1...2} http://minio3/data{1...2} http://minio4/data{1...2} --console-address ":9001"
    
    # Apenas o minio1 expõe as portas para o host (sua máquina)
    ports:
      - "9000:9000"
      - "9001:9001"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio2:
    # ... (configuração igual a minio1, exceto ports e volumes)
    image: minio/minio:RELEASE.2023-02-17T17-52-43Z
    hostname: minio2
    networks:
      - minio-net
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=123Senh@Forte
      - MINIO_UPDATE_MINISIGN_PUBKEY=
    command: server http://minio1/data{1...2} http://minio2/data{1...2} http://minio3/data{1...2} http://minio4/data{1...2} --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  minio3:
    # ... (configuração igual a minio1, exceto ports e volumes)
    image: minio/minio:RELEASE.2023-02-17T17-52-43Z
    hostname: minio3
    networks:
      - minio-net
    volumes:
      - data3-1:/data1
      - data3-2:/data2
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=123Senh@Forte
      - MINIO_UPDATE_MINISIGN_PUBKEY=
    command: server http://minio1/data{1...2} http://minio2/data{1...2} http://minio3/data{1...2} http://minio4/data{1...2} --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio4:
    # ... (configuração igual a minio1, exceto ports e volumes)
    image: minio/minio:RELEASE.2023-02-17T17-52-43Z
    hostname: minio4
    networks:
      - minio-net
    volumes:
      - data4-1:/data1
      - data4-2:/data2
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=123Senh@Forte
      - MINIO_UPDATE_MINISIGN_PUBKEY=
    command: server http://minio1/data{1...2} http://minio2/data{1...2} http://minio3/data{1...2} http://minio4/data{1...2} --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mc-setup:
    image: minio/mc
    container_name: minio_setup
    networks:
      - minio-net
    depends_on:
      minio1:
        condition: service_healthy
    environment:
      MINIO_SERVER_HOST: http://minio1:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: 123Senh@Forte
      BUCKET_NAME: meu-bucket
      LOCAL_IMAGE_FOLDER: /data
    volumes:
      # Mapeia o script de setup para dentro do container
      - ./setup-minio.sh:/scripts/setup-minio.sh
      # >>> ALTERAÇÃO AQUI: Mapeia a pasta local de imagens (no mesmo nível) para /data no mc-setup
      - ./imagem-para-upload:/data 
    entrypoint: /bin/sh -c "
      chmod +x /scripts/setup-minio.sh && /scripts/setup-minio.sh
      "

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2: